// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package bounty

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// AddRelayer is the `addRelayer` instruction.
type AddRelayer struct {
	RelayerAddress *ag_solanago.PublicKey

	// [0] = [WRITE, SIGNER] signer
	//
	// [1] = [] protocol
	//
	// [2] = [WRITE] relayer
	//
	// [3] = [] systemProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewAddRelayerInstructionBuilder creates a new `AddRelayer` instruction builder.
func NewAddRelayerInstructionBuilder() *AddRelayer {
	nd := &AddRelayer{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 4),
	}
	return nd
}

// SetRelayerAddress sets the "relayerAddress" parameter.
func (inst *AddRelayer) SetRelayerAddress(relayerAddress ag_solanago.PublicKey) *AddRelayer {
	inst.RelayerAddress = &relayerAddress
	return inst
}

// SetSignerAccount sets the "signer" account.
func (inst *AddRelayer) SetSignerAccount(signer ag_solanago.PublicKey) *AddRelayer {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(signer).WRITE().SIGNER()
	return inst
}

// GetSignerAccount gets the "signer" account.
func (inst *AddRelayer) GetSignerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetProtocolAccount sets the "protocol" account.
func (inst *AddRelayer) SetProtocolAccount(protocol ag_solanago.PublicKey) *AddRelayer {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(protocol)
	return inst
}

// GetProtocolAccount gets the "protocol" account.
func (inst *AddRelayer) GetProtocolAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetRelayerAccount sets the "relayer" account.
func (inst *AddRelayer) SetRelayerAccount(relayer ag_solanago.PublicKey) *AddRelayer {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(relayer).WRITE()
	return inst
}

// GetRelayerAccount gets the "relayer" account.
func (inst *AddRelayer) GetRelayerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *AddRelayer) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *AddRelayer {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *AddRelayer) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

func (inst AddRelayer) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_AddRelayer,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst AddRelayer) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *AddRelayer) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.RelayerAddress == nil {
			return errors.New("RelayerAddress parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Signer is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Protocol is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Relayer is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
	}
	return nil
}

func (inst *AddRelayer) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("AddRelayer")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("RelayerAddress", *inst.RelayerAddress))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=4]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("       signer", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("     protocol", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("      relayer", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("systemProgram", inst.AccountMetaSlice.Get(3)))
					})
				})
		})
}

func (obj AddRelayer) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `RelayerAddress` param:
	err = encoder.Encode(obj.RelayerAddress)
	if err != nil {
		return err
	}
	return nil
}
func (obj *AddRelayer) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `RelayerAddress`:
	err = decoder.Decode(&obj.RelayerAddress)
	if err != nil {
		return err
	}
	return nil
}

// NewAddRelayerInstruction declares a new AddRelayer instruction with the provided parameters and accounts.
func NewAddRelayerInstruction(
	// Parameters:
	relayerAddress ag_solanago.PublicKey,
	// Accounts:
	signer ag_solanago.PublicKey,
	protocol ag_solanago.PublicKey,
	relayer ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey) *AddRelayer {
	return NewAddRelayerInstructionBuilder().
		SetRelayerAddress(relayerAddress).
		SetSignerAccount(signer).
		SetProtocolAccount(protocol).
		SetRelayerAccount(relayer).
		SetSystemProgramAccount(systemProgram)
}

// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package bounty

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// create_bounty
//
// creates a bounty
type CreateBounty struct {
	Id           *string
	BountyAmount *uint64

	// [0] = [WRITE, SIGNER] creator
	//
	// [1] = [] mint
	//
	// [2] = [WRITE] bounty
	//
	// [3] = [] domain
	// ··········· domain to attach the bounty to
	//
	// [4] = [WRITE] creatorAccount
	// ··········· Account to credit the user
	//
	// [5] = [] bountyDenomination
	//
	// [6] = [WRITE] escrow
	// ··········· Bounty escrow to transfer funds to
	//
	// [7] = [] systemProgram
	//
	// [8] = [] tokenProgram
	//
	// [9] = [] rent
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewCreateBountyInstructionBuilder creates a new `CreateBounty` instruction builder.
func NewCreateBountyInstructionBuilder() *CreateBounty {
	nd := &CreateBounty{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 10),
	}
	return nd
}

// SetId sets the "id" parameter.
func (inst *CreateBounty) SetId(id string) *CreateBounty {
	inst.Id = &id
	return inst
}

// SetBountyAmount sets the "bountyAmount" parameter.
func (inst *CreateBounty) SetBountyAmount(bountyAmount uint64) *CreateBounty {
	inst.BountyAmount = &bountyAmount
	return inst
}

// SetCreatorAccount sets the "creator" account.
func (inst *CreateBounty) SetCreatorAccount(creator ag_solanago.PublicKey) *CreateBounty {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(creator).WRITE().SIGNER()
	return inst
}

// GetCreatorAccount gets the "creator" account.
func (inst *CreateBounty) GetCreatorAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetMintAccount sets the "mint" account.
func (inst *CreateBounty) SetMintAccount(mint ag_solanago.PublicKey) *CreateBounty {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(mint)
	return inst
}

// GetMintAccount gets the "mint" account.
func (inst *CreateBounty) GetMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetBountyAccount sets the "bounty" account.
func (inst *CreateBounty) SetBountyAccount(bounty ag_solanago.PublicKey) *CreateBounty {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(bounty).WRITE()
	return inst
}

// GetBountyAccount gets the "bounty" account.
func (inst *CreateBounty) GetBountyAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetDomainAccount sets the "domain" account.
// domain to attach the bounty to
func (inst *CreateBounty) SetDomainAccount(domain ag_solanago.PublicKey) *CreateBounty {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(domain)
	return inst
}

// GetDomainAccount gets the "domain" account.
// domain to attach the bounty to
func (inst *CreateBounty) GetDomainAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetCreatorAccountAccount sets the "creatorAccount" account.
// Account to credit the user
func (inst *CreateBounty) SetCreatorAccountAccount(creatorAccount ag_solanago.PublicKey) *CreateBounty {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(creatorAccount).WRITE()
	return inst
}

// GetCreatorAccountAccount gets the "creatorAccount" account.
// Account to credit the user
func (inst *CreateBounty) GetCreatorAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetBountyDenominationAccount sets the "bountyDenomination" account.
func (inst *CreateBounty) SetBountyDenominationAccount(bountyDenomination ag_solanago.PublicKey) *CreateBounty {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(bountyDenomination)
	return inst
}

// GetBountyDenominationAccount gets the "bountyDenomination" account.
func (inst *CreateBounty) GetBountyDenominationAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetEscrowAccount sets the "escrow" account.
// Bounty escrow to transfer funds to
func (inst *CreateBounty) SetEscrowAccount(escrow ag_solanago.PublicKey) *CreateBounty {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(escrow).WRITE()
	return inst
}

// GetEscrowAccount gets the "escrow" account.
// Bounty escrow to transfer funds to
func (inst *CreateBounty) GetEscrowAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *CreateBounty) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *CreateBounty {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *CreateBounty) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *CreateBounty) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *CreateBounty {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *CreateBounty) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetRentAccount sets the "rent" account.
func (inst *CreateBounty) SetRentAccount(rent ag_solanago.PublicKey) *CreateBounty {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(rent)
	return inst
}

// GetRentAccount gets the "rent" account.
func (inst *CreateBounty) GetRentAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

func (inst CreateBounty) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_CreateBounty,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst CreateBounty) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *CreateBounty) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Id == nil {
			return errors.New("Id parameter is not set")
		}
		if inst.BountyAmount == nil {
			return errors.New("BountyAmount parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Creator is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Mint is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Bounty is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.Domain is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.CreatorAccount is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.BountyDenomination is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.Escrow is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.Rent is not set")
		}
	}
	return nil
}

func (inst *CreateBounty) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("CreateBounty")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=2]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("          Id", *inst.Id))
						paramsBranch.Child(ag_format.Param("BountyAmount", *inst.BountyAmount))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=10]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("           creator", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("              mint", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("            bounty", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("            domain", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("           creator", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("bountyDenomination", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("            escrow", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("     systemProgram", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("      tokenProgram", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("              rent", inst.AccountMetaSlice.Get(9)))
					})
				})
		})
}

func (obj CreateBounty) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Id` param:
	err = encoder.Encode(obj.Id)
	if err != nil {
		return err
	}
	// Serialize `BountyAmount` param:
	err = encoder.Encode(obj.BountyAmount)
	if err != nil {
		return err
	}
	return nil
}
func (obj *CreateBounty) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Id`:
	err = decoder.Decode(&obj.Id)
	if err != nil {
		return err
	}
	// Deserialize `BountyAmount`:
	err = decoder.Decode(&obj.BountyAmount)
	if err != nil {
		return err
	}
	return nil
}

// NewCreateBountyInstruction declares a new CreateBounty instruction with the provided parameters and accounts.
func NewCreateBountyInstruction(
	// Parameters:
	id string,
	bountyAmount uint64,
	// Accounts:
	creator ag_solanago.PublicKey,
	mint ag_solanago.PublicKey,
	bounty ag_solanago.PublicKey,
	domain ag_solanago.PublicKey,
	creatorAccount ag_solanago.PublicKey,
	bountyDenomination ag_solanago.PublicKey,
	escrow ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey,
	rent ag_solanago.PublicKey) *CreateBounty {
	return NewCreateBountyInstructionBuilder().
		SetId(id).
		SetBountyAmount(bountyAmount).
		SetCreatorAccount(creator).
		SetMintAccount(mint).
		SetBountyAccount(bounty).
		SetDomainAccount(domain).
		SetCreatorAccountAccount(creatorAccount).
		SetBountyDenominationAccount(bountyDenomination).
		SetEscrowAccount(escrow).
		SetSystemProgramAccount(systemProgram).
		SetTokenProgramAccount(tokenProgram).
		SetRentAccount(rent)
}

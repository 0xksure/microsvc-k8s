// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package bounty

import (
	"fmt"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
)

type Bounty struct {
	Id   string
	Bump uint8

	// for the seeds
	BumpArray  [1]uint8
	EscrowBump uint8

	// Owner of bounty
	Owner ag_solanago.PublicKey
	Mint  ag_solanago.PublicKey

	// State - created, closed
	State BountyState

	// escrow of the bounty
	Escrow ag_solanago.PublicKey

	// domain information
	Domain ag_solanago.PublicKey

	// domain as bytes
	DomainBytes  []byte
	BountyAmount uint64
	CompletedBy  *ag_solanago.PublicKey `bin:"optional"`
}

var BountyDiscriminator = [8]byte{237, 16, 105, 198, 19, 69, 242, 234}

func (obj Bounty) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(BountyDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Id` param:
	err = encoder.Encode(obj.Id)
	if err != nil {
		return err
	}
	// Serialize `Bump` param:
	err = encoder.Encode(obj.Bump)
	if err != nil {
		return err
	}
	// Serialize `BumpArray` param:
	err = encoder.Encode(obj.BumpArray)
	if err != nil {
		return err
	}
	// Serialize `EscrowBump` param:
	err = encoder.Encode(obj.EscrowBump)
	if err != nil {
		return err
	}
	// Serialize `Owner` param:
	err = encoder.Encode(obj.Owner)
	if err != nil {
		return err
	}
	// Serialize `Mint` param:
	err = encoder.Encode(obj.Mint)
	if err != nil {
		return err
	}
	// Serialize `State` param:
	err = encoder.Encode(obj.State)
	if err != nil {
		return err
	}
	// Serialize `Escrow` param:
	err = encoder.Encode(obj.Escrow)
	if err != nil {
		return err
	}
	// Serialize `Domain` param:
	err = encoder.Encode(obj.Domain)
	if err != nil {
		return err
	}
	// Serialize `DomainBytes` param:
	err = encoder.Encode(obj.DomainBytes)
	if err != nil {
		return err
	}
	// Serialize `BountyAmount` param:
	err = encoder.Encode(obj.BountyAmount)
	if err != nil {
		return err
	}
	// Serialize `CompletedBy` param (optional):
	{
		if obj.CompletedBy == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.CompletedBy)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

func (obj *Bounty) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(BountyDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[237 16 105 198 19 69 242 234]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Id`:
	err = decoder.Decode(&obj.Id)
	if err != nil {
		return err
	}
	// Deserialize `Bump`:
	err = decoder.Decode(&obj.Bump)
	if err != nil {
		return err
	}
	// Deserialize `BumpArray`:
	err = decoder.Decode(&obj.BumpArray)
	if err != nil {
		return err
	}
	// Deserialize `EscrowBump`:
	err = decoder.Decode(&obj.EscrowBump)
	if err != nil {
		return err
	}
	// Deserialize `Owner`:
	err = decoder.Decode(&obj.Owner)
	if err != nil {
		return err
	}
	// Deserialize `Mint`:
	err = decoder.Decode(&obj.Mint)
	if err != nil {
		return err
	}
	// Deserialize `State`:
	err = decoder.Decode(&obj.State)
	if err != nil {
		return err
	}
	// Deserialize `Escrow`:
	err = decoder.Decode(&obj.Escrow)
	if err != nil {
		return err
	}
	// Deserialize `Domain`:
	err = decoder.Decode(&obj.Domain)
	if err != nil {
		return err
	}
	// Deserialize `DomainBytes`:
	err = decoder.Decode(&obj.DomainBytes)
	if err != nil {
		return err
	}
	// Deserialize `BountyAmount`:
	err = decoder.Decode(&obj.BountyAmount)
	if err != nil {
		return err
	}
	// Deserialize `CompletedBy` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.CompletedBy)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

type Denomination struct {
	Bump         uint8
	BumpArray    [1]uint8
	Mint         ag_solanago.PublicKey
	Active       bool
	FeeCollector ag_solanago.PublicKey
}

var DenominationDiscriminator = [8]byte{255, 95, 246, 40, 56, 163, 107, 85}

func (obj Denomination) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(DenominationDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Bump` param:
	err = encoder.Encode(obj.Bump)
	if err != nil {
		return err
	}
	// Serialize `BumpArray` param:
	err = encoder.Encode(obj.BumpArray)
	if err != nil {
		return err
	}
	// Serialize `Mint` param:
	err = encoder.Encode(obj.Mint)
	if err != nil {
		return err
	}
	// Serialize `Active` param:
	err = encoder.Encode(obj.Active)
	if err != nil {
		return err
	}
	// Serialize `FeeCollector` param:
	err = encoder.Encode(obj.FeeCollector)
	if err != nil {
		return err
	}
	return nil
}

func (obj *Denomination) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(DenominationDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[255 95 246 40 56 163 107 85]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Bump`:
	err = decoder.Decode(&obj.Bump)
	if err != nil {
		return err
	}
	// Deserialize `BumpArray`:
	err = decoder.Decode(&obj.BumpArray)
	if err != nil {
		return err
	}
	// Deserialize `Mint`:
	err = decoder.Decode(&obj.Mint)
	if err != nil {
		return err
	}
	// Deserialize `Active`:
	err = decoder.Decode(&obj.Active)
	if err != nil {
		return err
	}
	// Deserialize `FeeCollector`:
	err = decoder.Decode(&obj.FeeCollector)
	if err != nil {
		return err
	}
	return nil
}

type Domain struct {
	// bump is used to sign transactions
	Bump   uint8
	Active bool

	// owner of the domain, could be an individual or dao
	// it's the user who manage the domain
	Owner ag_solanago.PublicKey

	// FIXME: Rename
	Data DomainData
}

var DomainDiscriminator = [8]byte{167, 191, 231, 63, 146, 41, 115, 27}

func (obj Domain) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(DomainDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Bump` param:
	err = encoder.Encode(obj.Bump)
	if err != nil {
		return err
	}
	// Serialize `Active` param:
	err = encoder.Encode(obj.Active)
	if err != nil {
		return err
	}
	// Serialize `Owner` param:
	err = encoder.Encode(obj.Owner)
	if err != nil {
		return err
	}
	// Serialize `Data` param:
	err = encoder.Encode(obj.Data)
	if err != nil {
		return err
	}
	return nil
}

func (obj *Domain) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(DomainDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[167 191 231 63 146 41 115 27]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Bump`:
	err = decoder.Decode(&obj.Bump)
	if err != nil {
		return err
	}
	// Deserialize `Active`:
	err = decoder.Decode(&obj.Active)
	if err != nil {
		return err
	}
	// Deserialize `Owner`:
	err = decoder.Decode(&obj.Owner)
	if err != nil {
		return err
	}
	// Deserialize `Data`:
	err = decoder.Decode(&obj.Data)
	if err != nil {
		return err
	}
	return nil
}

type Protocol struct {
	Bump     uint8
	BumpSeed [1]uint8
	Owner    ag_solanago.PublicKey
	SandMint ag_solanago.PublicKey
}

var ProtocolDiscriminator = [8]byte{45, 39, 101, 43, 115, 72, 131, 40}

func (obj Protocol) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(ProtocolDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Bump` param:
	err = encoder.Encode(obj.Bump)
	if err != nil {
		return err
	}
	// Serialize `BumpSeed` param:
	err = encoder.Encode(obj.BumpSeed)
	if err != nil {
		return err
	}
	// Serialize `Owner` param:
	err = encoder.Encode(obj.Owner)
	if err != nil {
		return err
	}
	// Serialize `SandMint` param:
	err = encoder.Encode(obj.SandMint)
	if err != nil {
		return err
	}
	return nil
}

func (obj *Protocol) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(ProtocolDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[45 39 101 43 115 72 131 40]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Bump`:
	err = decoder.Decode(&obj.Bump)
	if err != nil {
		return err
	}
	// Deserialize `BumpSeed`:
	err = decoder.Decode(&obj.BumpSeed)
	if err != nil {
		return err
	}
	// Deserialize `Owner`:
	err = decoder.Decode(&obj.Owner)
	if err != nil {
		return err
	}
	// Deserialize `SandMint`:
	err = decoder.Decode(&obj.SandMint)
	if err != nil {
		return err
	}
	return nil
}

type Relayer struct {
	Bump     uint8
	BumpSeed [1]uint8
	Owner    ag_solanago.PublicKey
	Active   bool
}

var RelayerDiscriminator = [8]byte{168, 116, 52, 174, 161, 196, 71, 218}

func (obj Relayer) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(RelayerDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Bump` param:
	err = encoder.Encode(obj.Bump)
	if err != nil {
		return err
	}
	// Serialize `BumpSeed` param:
	err = encoder.Encode(obj.BumpSeed)
	if err != nil {
		return err
	}
	// Serialize `Owner` param:
	err = encoder.Encode(obj.Owner)
	if err != nil {
		return err
	}
	// Serialize `Active` param:
	err = encoder.Encode(obj.Active)
	if err != nil {
		return err
	}
	return nil
}

func (obj *Relayer) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(RelayerDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[168 116 52 174 161 196 71 218]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Bump`:
	err = decoder.Decode(&obj.Bump)
	if err != nil {
		return err
	}
	// Deserialize `BumpSeed`:
	err = decoder.Decode(&obj.BumpSeed)
	if err != nil {
		return err
	}
	// Deserialize `Owner`:
	err = decoder.Decode(&obj.Owner)
	if err != nil {
		return err
	}
	// Deserialize `Active`:
	err = decoder.Decode(&obj.Active)
	if err != nil {
		return err
	}
	return nil
}

type Relayers struct {
	Relayers []ag_solanago.PublicKey
}

var RelayersDiscriminator = [8]byte{243, 155, 0, 67, 189, 240, 222, 29}

func (obj Relayers) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(RelayersDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Relayers` param:
	err = encoder.Encode(obj.Relayers)
	if err != nil {
		return err
	}
	return nil
}

func (obj *Relayers) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(RelayersDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[243 155 0 67 189 240 222 29]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Relayers`:
	err = decoder.Decode(&obj.Relayers)
	if err != nil {
		return err
	}
	return nil
}

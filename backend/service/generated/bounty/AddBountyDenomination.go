// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package bounty

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// add bounty denomination
// it
type AddBountyDenomination struct {

	// [0] = [WRITE, SIGNER] creator
	//
	// [1] = [] protocol
	// ··········· protocol config
	//
	// [2] = [] mint
	// ··········· mint to be used for denomination
	//
	// [3] = [WRITE] denomination
	// ··········· bounty denoination to be created
	//
	// [4] = [WRITE] feeCollector
	// ··········· Fee collector is owned by the protocol and
	// ··········· collects fees from the bounty
	//
	// [5] = [] tokenProgram
	//
	// [6] = [] systemProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewAddBountyDenominationInstructionBuilder creates a new `AddBountyDenomination` instruction builder.
func NewAddBountyDenominationInstructionBuilder() *AddBountyDenomination {
	nd := &AddBountyDenomination{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 7),
	}
	return nd
}

// SetCreatorAccount sets the "creator" account.
func (inst *AddBountyDenomination) SetCreatorAccount(creator ag_solanago.PublicKey) *AddBountyDenomination {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(creator).WRITE().SIGNER()
	return inst
}

// GetCreatorAccount gets the "creator" account.
func (inst *AddBountyDenomination) GetCreatorAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetProtocolAccount sets the "protocol" account.
// protocol config
func (inst *AddBountyDenomination) SetProtocolAccount(protocol ag_solanago.PublicKey) *AddBountyDenomination {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(protocol)
	return inst
}

// GetProtocolAccount gets the "protocol" account.
// protocol config
func (inst *AddBountyDenomination) GetProtocolAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetMintAccount sets the "mint" account.
// mint to be used for denomination
func (inst *AddBountyDenomination) SetMintAccount(mint ag_solanago.PublicKey) *AddBountyDenomination {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(mint)
	return inst
}

// GetMintAccount gets the "mint" account.
// mint to be used for denomination
func (inst *AddBountyDenomination) GetMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetDenominationAccount sets the "denomination" account.
// bounty denoination to be created
func (inst *AddBountyDenomination) SetDenominationAccount(denomination ag_solanago.PublicKey) *AddBountyDenomination {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(denomination).WRITE()
	return inst
}

// GetDenominationAccount gets the "denomination" account.
// bounty denoination to be created
func (inst *AddBountyDenomination) GetDenominationAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetFeeCollectorAccount sets the "feeCollector" account.
// Fee collector is owned by the protocol and
// collects fees from the bounty
func (inst *AddBountyDenomination) SetFeeCollectorAccount(feeCollector ag_solanago.PublicKey) *AddBountyDenomination {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(feeCollector).WRITE()
	return inst
}

// GetFeeCollectorAccount gets the "feeCollector" account.
// Fee collector is owned by the protocol and
// collects fees from the bounty
func (inst *AddBountyDenomination) GetFeeCollectorAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *AddBountyDenomination) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *AddBountyDenomination {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *AddBountyDenomination) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *AddBountyDenomination) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *AddBountyDenomination {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *AddBountyDenomination) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

func (inst AddBountyDenomination) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_AddBountyDenomination,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst AddBountyDenomination) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *AddBountyDenomination) Validate() error {
	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Creator is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Protocol is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Mint is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.Denomination is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.FeeCollector is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
	}
	return nil
}

func (inst *AddBountyDenomination) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("AddBountyDenomination")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=7]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("      creator", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("     protocol", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("         mint", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta(" denomination", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta(" feeCollector", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta(" tokenProgram", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("systemProgram", inst.AccountMetaSlice.Get(6)))
					})
				})
		})
}

func (obj AddBountyDenomination) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *AddBountyDenomination) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewAddBountyDenominationInstruction declares a new AddBountyDenomination instruction with the provided parameters and accounts.
func NewAddBountyDenominationInstruction(
	// Accounts:
	creator ag_solanago.PublicKey,
	protocol ag_solanago.PublicKey,
	mint ag_solanago.PublicKey,
	denomination ag_solanago.PublicKey,
	feeCollector ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey) *AddBountyDenomination {
	return NewAddBountyDenominationInstructionBuilder().
		SetCreatorAccount(creator).
		SetProtocolAccount(protocol).
		SetMintAccount(mint).
		SetDenominationAccount(denomination).
		SetFeeCollectorAccount(feeCollector).
		SetTokenProgramAccount(tokenProgram).
		SetSystemProgramAccount(systemProgram)
}

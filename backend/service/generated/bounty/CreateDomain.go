// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package bounty

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// create domain
type CreateDomain struct {
	DomainType   *string
	Platform     *string
	Organization *string
	Team         *string

	// [0] = [WRITE, SIGNER] creator
	//
	// [1] = [WRITE] protocol
	//
	// [2] = [WRITE] domain
	//
	// [3] = [] systemProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewCreateDomainInstructionBuilder creates a new `CreateDomain` instruction builder.
func NewCreateDomainInstructionBuilder() *CreateDomain {
	nd := &CreateDomain{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 4),
	}
	return nd
}

// SetDomainType sets the "domainType" parameter.
func (inst *CreateDomain) SetDomainType(domainType string) *CreateDomain {
	inst.DomainType = &domainType
	return inst
}

// SetPlatform sets the "platform" parameter.
func (inst *CreateDomain) SetPlatform(platform string) *CreateDomain {
	inst.Platform = &platform
	return inst
}

// SetOrganization sets the "organization" parameter.
func (inst *CreateDomain) SetOrganization(organization string) *CreateDomain {
	inst.Organization = &organization
	return inst
}

// SetTeam sets the "team" parameter.
func (inst *CreateDomain) SetTeam(team string) *CreateDomain {
	inst.Team = &team
	return inst
}

// SetCreatorAccount sets the "creator" account.
func (inst *CreateDomain) SetCreatorAccount(creator ag_solanago.PublicKey) *CreateDomain {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(creator).WRITE().SIGNER()
	return inst
}

// GetCreatorAccount gets the "creator" account.
func (inst *CreateDomain) GetCreatorAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetProtocolAccount sets the "protocol" account.
func (inst *CreateDomain) SetProtocolAccount(protocol ag_solanago.PublicKey) *CreateDomain {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(protocol).WRITE()
	return inst
}

// GetProtocolAccount gets the "protocol" account.
func (inst *CreateDomain) GetProtocolAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetDomainAccount sets the "domain" account.
func (inst *CreateDomain) SetDomainAccount(domain ag_solanago.PublicKey) *CreateDomain {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(domain).WRITE()
	return inst
}

// GetDomainAccount gets the "domain" account.
func (inst *CreateDomain) GetDomainAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *CreateDomain) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *CreateDomain {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *CreateDomain) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

func (inst CreateDomain) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_CreateDomain,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst CreateDomain) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *CreateDomain) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.DomainType == nil {
			return errors.New("DomainType parameter is not set")
		}
		if inst.Platform == nil {
			return errors.New("Platform parameter is not set")
		}
		if inst.Organization == nil {
			return errors.New("Organization parameter is not set")
		}
		if inst.Team == nil {
			return errors.New("Team parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Creator is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Protocol is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Domain is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
	}
	return nil
}

func (inst *CreateDomain) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("CreateDomain")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=4]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("  DomainType", *inst.DomainType))
						paramsBranch.Child(ag_format.Param("    Platform", *inst.Platform))
						paramsBranch.Child(ag_format.Param("Organization", *inst.Organization))
						paramsBranch.Child(ag_format.Param("        Team", *inst.Team))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=4]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("      creator", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("     protocol", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("       domain", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("systemProgram", inst.AccountMetaSlice.Get(3)))
					})
				})
		})
}

func (obj CreateDomain) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `DomainType` param:
	err = encoder.Encode(obj.DomainType)
	if err != nil {
		return err
	}
	// Serialize `Platform` param:
	err = encoder.Encode(obj.Platform)
	if err != nil {
		return err
	}
	// Serialize `Organization` param:
	err = encoder.Encode(obj.Organization)
	if err != nil {
		return err
	}
	// Serialize `Team` param:
	err = encoder.Encode(obj.Team)
	if err != nil {
		return err
	}
	return nil
}
func (obj *CreateDomain) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `DomainType`:
	err = decoder.Decode(&obj.DomainType)
	if err != nil {
		return err
	}
	// Deserialize `Platform`:
	err = decoder.Decode(&obj.Platform)
	if err != nil {
		return err
	}
	// Deserialize `Organization`:
	err = decoder.Decode(&obj.Organization)
	if err != nil {
		return err
	}
	// Deserialize `Team`:
	err = decoder.Decode(&obj.Team)
	if err != nil {
		return err
	}
	return nil
}

// NewCreateDomainInstruction declares a new CreateDomain instruction with the provided parameters and accounts.
func NewCreateDomainInstruction(
	// Parameters:
	domainType string,
	platform string,
	organization string,
	team string,
	// Accounts:
	creator ag_solanago.PublicKey,
	protocol ag_solanago.PublicKey,
	domain ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey) *CreateDomain {
	return NewCreateDomainInstructionBuilder().
		SetDomainType(domainType).
		SetPlatform(platform).
		SetOrganization(organization).
		SetTeam(team).
		SetCreatorAccount(creator).
		SetProtocolAccount(protocol).
		SetDomainAccount(domain).
		SetSystemProgramAccount(systemProgram)
}

// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package bounty

import (
	"bytes"
	"fmt"
	ag_spew "github.com/davecgh/go-spew/spew"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_text "github.com/gagliardetto/solana-go/text"
	ag_treeout "github.com/gagliardetto/treeout"
)

var ProgramID ag_solanago.PublicKey = ag_solanago.MustPublicKeyFromBase58("BoUNtye7MsbG3rWSXxgXTyWt2Q7veUrKwWeDJo7BED3e")

func SetProgramID(pubkey ag_solanago.PublicKey) {
	ProgramID = pubkey
	ag_solanago.RegisterInstructionDecoder(ProgramID, registryDecodeInstruction)
}

const ProgramName = "Bounty"

func init() {
	if !ProgramID.IsZero() {
		ag_solanago.RegisterInstructionDecoder(ProgramID, registryDecodeInstruction)
	}
}

var (
	// initialize
	//
	// - Initializes the protocol
	// - creates the bounty mint
	Instruction_Initialize = ag_binary.TypeID([8]byte{175, 175, 109, 31, 13, 152, 155, 237})

	// add bounty denomination
	// it
	Instruction_AddBountyDenomination = ag_binary.TypeID([8]byte{57, 70, 243, 255, 122, 24, 57, 244})

	// deactivate bounty denomination
	Instruction_DeactivateBountyDenomination = ag_binary.TypeID([8]byte{223, 116, 71, 26, 98, 198, 235, 104})

	// create_bounty
	//
	// creates a bounty
	Instruction_CreateBounty = ag_binary.TypeID([8]byte{122, 90, 14, 143, 8, 125, 200, 2})

	// complete_bounty
	//
	// Try to complete bounty
	Instruction_CompleteBounty = ag_binary.TypeID([8]byte{175, 126, 79, 116, 248, 106, 31, 117})

	// complete_bounty
	//
	// Try to complete bounty
	Instruction_CompleteBountyAsRelayer = ag_binary.TypeID([8]byte{133, 215, 10, 55, 154, 134, 42, 86})

	Instruction_AddRelayer = ag_binary.TypeID([8]byte{184, 240, 94, 199, 19, 71, 21, 192})

	Instruction_RemoveRelayer = ag_binary.TypeID([8]byte{154, 149, 161, 231, 69, 74, 136, 237})

	// create domain
	Instruction_CreateDomain = ag_binary.TypeID([8]byte{103, 208, 151, 155, 64, 18, 133, 109})

	// deactivate domain
	Instruction_DeactivateDomain = ag_binary.TypeID([8]byte{135, 190, 180, 160, 230, 33, 245, 185})
)

// InstructionIDToName returns the name of the instruction given its ID.
func InstructionIDToName(id ag_binary.TypeID) string {
	switch id {
	case Instruction_Initialize:
		return "Initialize"
	case Instruction_AddBountyDenomination:
		return "AddBountyDenomination"
	case Instruction_DeactivateBountyDenomination:
		return "DeactivateBountyDenomination"
	case Instruction_CreateBounty:
		return "CreateBounty"
	case Instruction_CompleteBounty:
		return "CompleteBounty"
	case Instruction_CompleteBountyAsRelayer:
		return "CompleteBountyAsRelayer"
	case Instruction_AddRelayer:
		return "AddRelayer"
	case Instruction_RemoveRelayer:
		return "RemoveRelayer"
	case Instruction_CreateDomain:
		return "CreateDomain"
	case Instruction_DeactivateDomain:
		return "DeactivateDomain"
	default:
		return ""
	}
}

type Instruction struct {
	ag_binary.BaseVariant
}

func (inst *Instruction) EncodeToTree(parent ag_treeout.Branches) {
	if enToTree, ok := inst.Impl.(ag_text.EncodableToTree); ok {
		enToTree.EncodeToTree(parent)
	} else {
		parent.Child(ag_spew.Sdump(inst))
	}
}

var InstructionImplDef = ag_binary.NewVariantDefinition(
	ag_binary.AnchorTypeIDEncoding,
	[]ag_binary.VariantType{
		{
			"initialize", (*Initialize)(nil),
		},
		{
			"add_bounty_denomination", (*AddBountyDenomination)(nil),
		},
		{
			"deactivate_bounty_denomination", (*DeactivateBountyDenomination)(nil),
		},
		{
			"create_bounty", (*CreateBounty)(nil),
		},
		{
			"complete_bounty", (*CompleteBounty)(nil),
		},
		{
			"complete_bounty_as_relayer", (*CompleteBountyAsRelayer)(nil),
		},
		{
			"add_relayer", (*AddRelayer)(nil),
		},
		{
			"remove_relayer", (*RemoveRelayer)(nil),
		},
		{
			"create_domain", (*CreateDomain)(nil),
		},
		{
			"deactivate_domain", (*DeactivateDomain)(nil),
		},
	},
)

func (inst *Instruction) ProgramID() ag_solanago.PublicKey {
	return ProgramID
}

func (inst *Instruction) Accounts() (out []*ag_solanago.AccountMeta) {
	return inst.Impl.(ag_solanago.AccountsGettable).GetAccounts()
}

func (inst *Instruction) Data() ([]byte, error) {
	buf := new(bytes.Buffer)
	if err := ag_binary.NewBorshEncoder(buf).Encode(inst); err != nil {
		return nil, fmt.Errorf("unable to encode instruction: %w", err)
	}
	return buf.Bytes(), nil
}

func (inst *Instruction) TextEncode(encoder *ag_text.Encoder, option *ag_text.Option) error {
	return encoder.Encode(inst.Impl, option)
}

func (inst *Instruction) UnmarshalWithDecoder(decoder *ag_binary.Decoder) error {
	return inst.BaseVariant.UnmarshalBinaryVariant(decoder, InstructionImplDef)
}

func (inst *Instruction) MarshalWithEncoder(encoder *ag_binary.Encoder) error {
	err := encoder.WriteBytes(inst.TypeID.Bytes(), false)
	if err != nil {
		return fmt.Errorf("unable to write variant type: %w", err)
	}
	return encoder.Encode(inst.Impl)
}

func registryDecodeInstruction(accounts []*ag_solanago.AccountMeta, data []byte) (interface{}, error) {
	inst, err := DecodeInstruction(accounts, data)
	if err != nil {
		return nil, err
	}
	return inst, nil
}

func DecodeInstruction(accounts []*ag_solanago.AccountMeta, data []byte) (*Instruction, error) {
	inst := new(Instruction)
	if err := ag_binary.NewBorshDecoder(data).Decode(inst); err != nil {
		return nil, fmt.Errorf("unable to decode instruction: %w", err)
	}
	if v, ok := inst.Impl.(ag_solanago.AccountsSettable); ok {
		err := v.SetAccounts(accounts)
		if err != nil {
			return nil, fmt.Errorf("unable to set accounts for instruction: %w", err)
		}
	}
	return inst, nil
}
